#!/usr/bin/env ruby

require 'json'
require 'node_semver'

reqlist = []
provlist = []
selfreq = {}
selfprov = {}

ARGF.each do |file|
  next unless file =~ /package\.json(\n)?$/ && !file.index('bower_components')
  reqlist << file.strip
  provlist << file.strip if file =~ %r{/usr/lib.*?/node_modules/.*/node_modules}
end

# 1. parse the reqlist

reqlist.each do |f|
  js = JSON.parse(open(f, 'r:UTF-8').read)
  next if js['dependencies'].nil?
  js['dependencies'].each do |k, v|
    next if k == 'bower'
    if selfreq.key?(k)
      selfreq[k] << v
    else
      selfreq[k] = [v]
    end
  end
end

# uniq selfreq
selfreq.each { |k, v| selfreq[k] = v.uniq }

# 2. parse the provlist

unless provlist.empty?
  provlist.each do |json|
    js = JSON.parse(open(json, 'r:UTF-8').read)
    if selfprov.key?(js['name'])
      selfprov[js['name']] << js['version']
    else
      selfprov[js['name']] = [js['version']]
    end
  end
end

# uniq selfprov
selfprov.each { |k, v| selfprov[k] = v.uniq }

# 3. parse the reqs
selfprov.each do |k, v|
  next if selfreq[k].nil?
  selfreq[k].reject! do |i|
    match = false
    v.each do |j|
      next unless NodeSemver.satisfies(j, i)
      match = true
      break
    end
    match
  end
end

selfreq.reject! { |_k, v| v.empty? }

# 4. print the real reqs

selfreq.each do |k, v|
  whole = []
  v.each { |i| whole.concat(NodeSemver.valid_range(i)) }
  whole.uniq.each do |j|
    r = j.match(/([^\d]+)(\d.*)/)
    puts "npm(#{k}) #{r[1]} #{r[2]}"
  end
end

# 5. calculate the maximum node version
node = []

reqlist.each do |j|
  json = JSON.parse(open(j, 'r:UTF-8').read)
  next unless json['engines']
  if json['engines'].class == Array
    json['engines'].each do |i|
      r = i.match(/[^\d]+(\d.*)/)
      node << r[1]
    end
  elsif json['engines'].class == String
    r = json['engines'].match(/[^\d]+(\d.*)/)
    node << r[1]
  else # Hash
    ver = json['engines']['node'].sub('*', '0.0.0')
    if ver.index('||')
      ver.split('||').each { |i| node << (i =~ /[^\d]+(\d.*)/ ? Regexp.last_match(1) : i).strip }
    else
      node << (ver =~ /[^\d]+(\d.*)/ ? Regexp.last_match(1) : ver)
    end
  end
end

max = node.empty? ? nil : node.uniq.sort[-1]

puts "nodejs(engine) >= #{max}" unless max.nil?
