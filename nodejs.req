#!/usr/bin/env ruby

require 'json'
require 'node2rpm'

def fill_prov(name, version, hash)
  if hash[name].nil?
    hash[name] = [version]
  else
    hash[name] << version
  end
  hash
end

def fill_req(dependencies, hash)
  return hash if dependencies.nil? || dependencies.empty?
  dependencies.each do |k,v|
    if hash[k].nil?
      hash[k] = [v]
    else
      hash[k] << v
    end
  end
  hash
end

def req_satisfy(array, range_array)
  array.map! do |a|
    range_array.map do |r|
      NodeSemver.satisfies(a, r)
    end.include?(true)
  end.include?(true)
end

def split(version)
  [version.gsub(/(>|<|=)\d+.*$/, '\1'),
   version.gsub(/.*?(\d+.*)/, '\1')]
end

def print_req(name, range)
  name = 'npm(' + name + ')'
  range.each do |r|
    NodeSemver.valid_range(r).each do |version|
      comparator, target_version = split(version)
      puts name + "\s" + comparator + "\s" + target_version
    end
  end
end

def fill_engine(engine, array)
  return array if engine.nil?
  regex = /[^\d]+(\d+.*)/
  case engine
  when Array
    engine.each {|e| array << regex_fill(e, regex) }
  when String
    array << regex_fill(engine, regex)
  else
    v = engine['node']
    return array if v.nil? || v.empty?
    v = v.sub('*', '0.0.0')
    if v.index('||')
      v.split('||').each {|e| array << regex_fill(e, regex) }
    else
      array << regex_fill(v, regex)
    end
  end
  array
end

def regex_fill(string, regex)
  string =~ regex ? Regexp.last_match(1).strip : string.strip
end

prov = {}
req = {}
engines = []

Dir.glob(Node2RPM::System.buildroot + '/**/*') do |f|
  next unless f =~ %r{/package\.json(\\n)?} && !f.index('bower_components')
  json = JSON.parse(open(f.strip, 'r:UTF-8').read)
  name = json['name']
  version = json['version']
  dependencies = json['dependencies']
  engine = json['engines']
  engines = fill_engine(engine, engines)
  prov = fill_prov(name, version, prov)
  req = fill_req(dependencies, req)
end

req.each do |k, v|
  next if prov.keys.include?(k) && req_satisfy(prov[k], v)
  print_req(k, v)
end

unless engines.empty?
  puts "nodejs(engine) >= " + engines.uniq.sort[-1]
end
