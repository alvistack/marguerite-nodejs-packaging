#!/usr/bin/ruby

require 'rubygems'
require 'json'
require_relative 'nodejs/semver.rb'
require_relative 'nodejs/vcmp.rb'
include Semver
include Vcmp

reqlist,provlist = [],[]
selfreq,selfprov = {},{}

# ARGF.each do |f| unknown problem: the later nested each
# in #3 step won't run completely ( 19 times vs. 14000+ times)
Dir.glob("/home/abuild/rpmbuild/BUILDROOT/**/package.json") do |f|

  unless f.index(/\/test\//)
    reqlist << f
    
    if f.index(/\/usr\/lib.*\/node_modules\/.*\/node_modules/)
        provlist << f
    end
  end

end

# 1. parse the reqlist

reqlist.each do |f|
        str = ""
        File.open(f) {|f| str = f.read}
        js = JSON.parse(str)
        
        unless js["dependencies"] == nil
            js["dependencies"].each do |k,v|
                deps = Semver.parse(k,v)
                # {"semver"=>[">=4.1.0","<5.0.0"]}
                deps.each do |m,n|
                    if selfreq.key?(m)
                        n.each { |i| selfreq[m] << i }
                    else
                        selfreq[m] = n
                    end
                end
            end
        end
end

# uniq selfreq
selfreq.each {|k,v| selfreq[k] = (v.uniq! if v.uniq!) || v}

# 2. parse the provlist

unless provlist.empty?
    provlist.each do |f|
        str = ""
        File.open(f) {|f| str = f.read}
        js = JSON.parse(str)
     
        if selfprov.key?(js["name"])
            selfprov[js["name"]] << js["version"]
        else
            selfprov[js["name"]] = [js["version"]]
        end
    end
end

# uniq selfprov
selfprov.each {|k,v| selfprov[k] = (v.uniq! if v.uniq!) || v}

# 3. parse the reqs

selfreq.keys.each do |req| # "vinyl"=>[">=0.5.0", "<0.6.0", ">=0.4.0", "<0.5.0"]

	selfprov.keys.each do |prov|

	if req.eql? prov

	    selfprov[prov].each do |i|
		selfreq[req].reject!  { |j| # >=0.5.0
			op = j.gsub(/[0-9].*$/,'')
			ve = j.gsub(op,'')
			Vcmp.comp(i,op,ve)
		    }
	    end

	end

	end

end

selfreq.reject! { |k,v| v.empty? }

# 4. print the real reqs

selfreq.each do |k,v|
        v.each do |i|
                op = i.gsub(/[0-9].*$/,'')
                ve = i.gsub(op,'')
                puts "npm(#{k}) #{op} #{ve}"
        end
end

