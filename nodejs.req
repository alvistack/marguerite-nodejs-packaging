#!/usr/bin/ruby

require 'rubygems'
require 'json'
require '/usr/lib/rpm/nodejs/semver.rb'
require '/usr/lib/rpm/nodejs/vcmp.rb'
include Semver
include Vcmp

reqlist,provlist = [],[]
selfreq,selfprov = {},{}

ARGF.each do |f| 
  if f.strip.end_with?("package.json")
    reqlist << f.strip
    if f.index(/\/usr\/lib.*\/node_modules\/.*\/node_modules/)
      provlist << f.strip
    end
  end
end

# 1. parse the reqlist

reqlist.each do |f|
    	js = {}
        File.open(f,'r:UTF-8') {|f1| js = JSON.parse(f1.read)}
        
        unless js["dependencies"] == nil
            js["dependencies"].each do |k,v|
                deps = Semver.parse(k,v)
                # {"semver"=>[">=4.1.0","<5.0.0"]}
                deps.each do |m,n|
                    if selfreq.key?(m)
                        n.each { |i| selfreq[m] << i }
                    else
                        selfreq[m] = n
                    end
                end
            end
        end
end

# uniq selfreq
selfreq.each {|k,v| selfreq[k] = (v.uniq! if v.uniq!) || v}

# 2. parse the provlist

unless provlist.empty?
    provlist.each do |f|
        js = {}
        File.open(f,'r:UTF-8') {|f1| js = JSON.parse(f1.read)}

	# rpm can have "-" in version
	if js["version"].index("-")
	  version = js["version"].gsub("-",".")
	else
	  version = js["version"]
	end
     
        if selfprov.key?(js["name"])
            selfprov[js["name"]] << version
        else
            selfprov[js["name"]] = [version]
        end
    end
end

# uniq selfprov
selfprov.each {|k,v| selfprov[k] = (v.uniq! if v.uniq!) || v}

# 3. parse the reqs

selfreq.keys.each do |req| # "vinyl"=>[">=0.5.0", "<0.6.0", ">=0.4.0", "<0.5.0"]

	selfprov.keys.each do |prov|

	if req.eql? prov

	    selfprov[prov].each do |i|
		selfreq[req].reject!  { |j| # >=0.5.0
			op = j.gsub(/[0-9].*$/,'')
			ve = j.gsub(op,'')
			Vcmp.comp(i,op,ve)
		}
	    end

	end

	end

end

selfreq.reject! { |_k,v| v.empty? }

# 4. print the real reqs

selfreq.each do |k,v|
        v.each do |i|
                op = i.gsub(/[0-9].*$/,'')
                ve = i.gsub(op,'')
                puts "npm(#{k}) #{op} #{ve}"
        end
end

# 5. calculate the maximum node version
node,max = [],[]

reqlist.each do |j|

	File.open(j,'r:UTF-8') do |f|
		json = JSON.parse(f.read)
		if json["engines"]
		     if json["engines"].class == String
			m = json["engines"].gsub(/[0-9].*/,'')
			v = json["engines"].gsub(m,'')
			v = v.gsub(/x|X/,'0')
			unless node.include?(v)
				node << v
			end
		     else
			json["engines"].each do |k,v1|
				unless k != "node" || v1 == nil || v1 == "*" # "*" means >= 0.0.0
					m = v1.gsub(/[0-9].*/,'')
					v1 = v1.gsub(m,'') # remove the ">=", always be
					v1 = v1.gsub(/x|X/,'0') # replace 0.1.x with 0.1.0
					unless node.include?(v1)
						node << v1
					end
				end
			end
		     end
		end
	end

end

node = ( node.uniq! if node.uniq! ) || node
node.each do |v|
	va = v.split('.')
	va.push('0') if va.size < 3 # from now va.size = 3
	va.each_index {|i| va[i] = va[i].to_i} # value to integer
	if max.empty?
		max = va
	else
		3.times do |i|
			if max[i] < va[i]
				max = va
			elsif max[i] == va[i]
				next
			end
		end
	end		
end

puts "nodejs(engine) >= #{max[0]}.#{max[1]}.#{max[2]}" unless max.empty?
